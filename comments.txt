Django ORM = Object Relational Mapper 

Abstract layer for datam 
    * Django handles database structure and changes
    * Focus on Python code
    * Use any database (within reason)

Using the ORM 

Define models -> Generate migrations files -> Setup database -> Store data

Models: 
    * Each model maps to a table
    * Models contain
        * Name
        * Fields 
        * Other metadata
        * Custom Python logic

Creating migrations
    * Ensure app is enabled in settings.py 
    * Use Django CLI
        * pyhon3 manage.py makemigrations

Aply migrations
    * Use Django CLI
        * python3 manage.py migrate
    * Run it after waiting for database

How to customise user model
    * Create model
        * Base from AbstractBaseUser and PermissionsMixin
    * Create custom manager
        * Used for CLI integration
    * Set AUTH_USER_MODEL
    * Create and run migrations
AbstractBaseUser
    * Provides features for authentication
    * Doesn't include fields
PermissionsMixin
    * Support for Djando permission system
    * Includes fields and methods
Common issues
    * Running migrations before setting custom model
    * Typos in config
    * Indentation in manager or model

Define user model manager
    * Userd to manage objects
    * Custom logic for creating objects
        * Has password
    * Used by Django CLI
        * Create superuser
BaseUserManager
    * Base class for managing users
    * Useful helper methods
        * normalize_email: for storing emails consistently
    * Methods we'll define
        * create_user: called when creating user
        * create_superuser: userd by the CLI to create a superuser (admin)
    
