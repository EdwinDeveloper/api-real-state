Django ORM = Object Relational Mapper 

Abstract layer for datam 
    * Django handles database structure and changes
    * Focus on Python code
    * Use any database (within reason)

Using the ORM 

Define models -> Generate migrations files -> Setup database -> Store data

Models: 
    * Each model maps to a table
    * Models contain
        * Name
        * Fields 
        * Other metadata
        * Custom Python logic

Creating migrations
    * Ensure app is enabled in settings.py 
    * Use Django CLI
        * pyhon3 manage.py makemigrations

Aply migrations
    * Use Django CLI
        * python3 manage.py migrate
    * Run it after waiting for database

How to customise user model
    * Create model
        * Base from AbstractBaseUser and PermissionsMixin
    * Create custom manager
        * Used for CLI integration
    * Set AUTH_USER_MODEL
    * Create and run migrations
AbstractBaseUser
    * Provides features for authentication
    * Doesn't include fields
PermissionsMixin
    * Support for Djando permission system
    * Includes fields and methods
Common issues
    * Running migrations before setting custom model
    * Typos in config
    * Indentation in manager or model

Define user model manager
    * Userd to manage objects
    * Custom logic for creating objects
        * Has password
    * Used by Django CLI
        * Create superuser
BaseUserManager
    * Base class for managing users
    * Useful helper methods
        * normalize_email: for storing emails consistently
    * Methods we'll define
        * create_user: called when creating user
        * create_superuser: userd by the CLI to create a superuser (admin)

How to enable Django admin
    * Enabled per model
    * inside admin.py
        * admin.site.register(Model_we_create)

Customising
    * Create class based off ModelAdmin or UserAdmin
    * Overrate/set class variables
Changing list of objects
    * ordering : change order items appear
    * list_display: fields to appear in list 
Add/Update page
    * fieldsets: control layout of page
    * readonly_fields: fields that cannot be changed
Add page
    * add_fields: fiealds displayed only on add page
Why documentation ? 
    * APIs are designed for developers to use
    * Need to know how to use it
    * An API is only as good as its documentation
What to document ?
    * Everything needed to use the API
    * Available endpoints (paths)
        * /api/recipes
    * Supported methods
        * GET, POST, PUT, PATCH, DELETE
    * Format of payloads (inputs)
        * Parameters
        * Post JSON format
    * Authentication process
Options for documentation
    * Manual
        * Word doc
        * Markdown
    * Automated
        * Use metadata from code (comments)
        * Generate documentation pages
Docs in DRF
    * Auto generate docs (with third party library)
        * drf-spectacular
        * Generate schema
        * Browsable web interface
            * Make test request
            * Handle auth
How it works
    * Generate "schema" file
    * Parse schema into GUI
OpenAPI Schema
    * Standard for describing APIs
    * Popular in industry
    * Supported by most API documentation tools
    * Uses popular formats YAML/JSON
Using a Schema
    * Download and run in local Swagger instance
    * Serve Swagger with API
Types of authentication
    * Basic
        * Send username and password with each request
    * Token
        * Use a token in the HTTP header
    * JSON Web Token (JWT)
        * Use an access token and refresh token
Session
    * Use cookies

APIView vs Viewsets
    What is a view ? 
        * Handles a request made to a URL
        * Django uses functions
        * Django Rest Framework uses classes
            * Reusable logic
            * Override behavior
        * Django Rest Framework also support decorators
        * APIView and Viewsets = Djando Rest Framework base classes
APIView
    * Focused around HTTP methods
    * Class methods for HTTP methods
        * GET, POST, PUT, PATCH, DELETE
    * Provite flexibility over URLs and logic
    * Useful for non CRUD APIs
        * Avoid simple Create, Read, Update, Delete APIs
        * Bespoke logic (eg: auth, jobs, external apis)
Viewsets
    * Focused around actions
        * Retrieve, list, update, partial update, destroy
    * Map to Django models
    * Use Routers to generate URLs
    * Gread for CRUD operations on models
